pipeline GTFSPipeline {

    GTFSExtractor
        -> GTFSArchiveInterpreter
        -> GTFSFilePicker
        -> GTFSFileInterpreter
        -> GTFSCSVInterpreter
        -> GTFSColumnDeleter
        -> GTFSTableInterpreter

        -> GTFSLoader;

    block GTFSExtractor oftype HttpExtractor {
        url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip";
    }

    block GTFSArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block GTFSFilePicker oftype FilePicker {
        path: "/stops.txt";
    }

    block GTFSFileInterpreter oftype TextFileInterpreter { }

    block GTFSCSVInterpreter oftype CSVInterpreter {
        enclosing: '"';
     }
    
    // Delete intermediate columns in order to match them below
    // B, D
    block GTFSColumnDeleter oftype ColumnDeleter {
        delete: [column B, column D];
    }

    block GTFSTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "stop_id" oftype integer, //integer,
            "stop_name" oftype text,
            "stop_lat" oftype Coordinate, //decimal,
            "stop_lon" oftype Coordinate, //decimal,
            "zone_id" oftype Zone1925 //Zone1925 //integer
        ];
    }


    // Filter
    valuetype Zone1925 oftype integer {
        constraints: [ZoneFilterConstraint];
    }
    
    constraint ZoneFilterConstraint oftype RangeConstraint {
        lowerBound: 1925;
        lowerBoundInclusive: true;
        upperBound: 1926;
        upperBoundInclusive: false;
    } 

    // Validate
    // stop_name -> text maintaining german umlauts
    // are they not usually maintaned? -> Yes that stays

    //stop_lat/stop_lon must be a geographic coordinates 
    //between -90 and 90, including upper/lower bounds
    //constraint NinetyIntervalConstraint on decimal: value >= 0.0 and value <= 1.0;
    valuetype Coordinate oftype decimal {
        constraints: [NinetyIntervalConstraint];
    }
    
    constraint NinetyIntervalConstraint oftype RangeConstraint {
        lowerBound: -90.0;
        lowerBoundInclusive: true;
        upperBound: 90.0;
        upperBoundInclusive: true;
    } 

    // Drop rows containing invalid data
    //-> how does that occur in jayvee?
    // what if datatype does not fit? -> i guess row is dropped automatically
    // what if there is a missing value? -> dropped automatically? analyze in python

    block GTFSLoader oftype SQLiteLoader {
        table: "stops";
        file: "./gtfs.sqlite";
    }
}